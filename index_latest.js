const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const xlsx = require('xlsx');

const COOKIE_PATH = path.resolve(__dirname, 'cookies.json');

(async () => {
  const downloadPath = path.resolve(__dirname, 'downloads');
  if (!fs.existsSync(downloadPath)) fs.mkdirSync(downloadPath);

  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
    args: [
      '--window-size=1200,800',
      '--disable-dev-shm-usage',
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-gpu'
    ]
  });

  const [page] = await browser.pages();

  const client = await page.target().createCDPSession();
  await client.send('Page.setDownloadBehavior', {
    behavior: 'allow',
    downloadPath: downloadPath,
  });

  await page.goto('https://seller.ozon.ru/app/finances/warehousing-cost', {
    waitUntil: 'networkidle2',
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏
  if (fs.existsSync(COOKIE_PATH) && fs.readFileSync(COOKIE_PATH, 'utf-8').trim() !== '') {
    const cookies = JSON.parse(fs.readFileSync(COOKIE_PATH));
    await page.setCookie(...cookies);
    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫—É–∫–∏');
    await page.reload({ waitUntil: 'networkidle2' });
  } else {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤—Ä—É—á–Ω—É—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ENTER –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
    await new Promise(resolve => process.stdin.once('data', () => resolve()));
    const cookies = await page.cookies();
    fs.writeFileSync(COOKIE_PATH, JSON.stringify(cookies, null, 2));
    console.log('‚úÖ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }

  try {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É (–∞–Ω–∞–ª–æ–≥ page.waitForTimeout)
    await new Promise(resolve => setTimeout(resolve, 1000));
  
    const result = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const declineButton = buttons.find(btn =>
        btn.textContent.trim().toLowerCase().includes("don't show again") ||
        btn.textContent.trim().toLowerCase().includes("–±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å")
      );
      if (declineButton) {
        declineButton.click();
        return true;
      }
      return false;
    });

    if (result) {
      console.log('‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
    } else {
      console.log('‚ÑπÔ∏è –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–æ —Ç–µ–∫—Å—Ç—É)');
    }
  } catch (err) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø:', err.message);
  }


  // –ù–∞–∂–∏–º–∞–µ–º "–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç"
  console.log('üëâ –ù–∞–∂–∏–º–∞–µ–º "–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç"...');
  await page.waitForSelector('button span:text("–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç")', { timeout: 10000 });
  await page.click('button span:text("–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç")');

  // –í—ã–±–∏—Ä–∞–µ–º "–ü–æ —Ç–æ–≤–∞—Ä–∞–º"
  console.log('üëâ –í—ã–±–∏—Ä–∞–µ–º "–ü–æ —Ç–æ–≤–∞—Ä–∞–º"...');
  await page.waitForSelector('label input[value="ByProducts"]', { timeout: 10000 });
  await page.click('label input[value="ByProducts"]');

  // –ù–∞–∂–∏–º–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å"
  console.log('üëâ –ù–∞–∂–∏–º–∞–µ–º "–°–∫–∞—á–∞—Ç—å"...');
  await page.waitForSelector('span:text("–°–∫–∞—á–∞—Ç—å")', { timeout: 10000 });
  await page.evaluate(() => {
    const buttons = Array.from(document.querySelectorAll('button'));
    const target = buttons.find(btn => btn.textContent.trim() === '–°–∫–∞—á–∞—Ç—å');
    if (target) target.click();
  });

  // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  console.log('‚è≥ –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É...');
  await page.waitForTimeout(15000);

  // –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ .xlsx —Ñ–∞–π–ª–∞
  const files = fs.readdirSync(downloadPath).filter(f => f.endsWith('.xlsx'));
  if (files.length === 0) {
    console.error('‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    await browser.close();
    return;
  }

  const latestFile = files
    .map(f => ({ name: f, time: fs.statSync(path.join(downloadPath, f)).mtime.getTime() }))
    .sort((a, b) => b.time - a.time)[0].name;

  const filePath = path.join(downloadPath, latestFile);
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${latestFile}`);

  // –ß—Ç–µ–Ω–∏–µ Excel –∏ –ø–∞—Ä—Å–∏–Ω–≥ –≤ JSON
  const workbook = xlsx.readFile(filePath);
  const sheet = workbook.Sheets[workbook.SheetNames[0]];
  const json = xlsx.utils.sheet_to_json(sheet);

  const jsonPath = path.join(__dirname, 'parsed.json');
  fs.writeFileSync(jsonPath, JSON.stringify(json, null, 2), 'utf8');
  console.log(`üì¶ JSON —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${jsonPath}`);

  await browser.close();
})();
