import fs from 'fs';
import path from 'path';
import puppeteer from 'puppeteer';

export async function initializeBrowser() {
  const downloadPath = path.resolve('./downloads');
  if (!fs.existsSync(downloadPath)) fs.mkdirSync(downloadPath);

  const browser = await puppeteer.launch({
    executablePath: puppeteer.executablePath(),
    headless: false,
    defaultViewport: null,
    args: [
      '--window-size=1400,800',
      '--disable-dev-shm-usage',
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-gpu'
    ]
  });

  const [page] = await browser.pages();

  const client = await page.target().createCDPSession();
  await client.send('Page.setDownloadBehavior', {
    behavior: 'allow',
    downloadPath: downloadPath,
  });

  return { browser, page };
}

export async function handleCookies(page, COOKIE_PATH) {
  if (fs.existsSync(COOKIE_PATH) && fs.readFileSync(COOKIE_PATH, 'utf-8').trim() !== '') {
    const cookies = JSON.parse(fs.readFileSync(COOKIE_PATH));
    await page.setCookie(...cookies);
    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫—É–∫–∏');
    await page.reload({ waitUntil: 'networkidle2' });
  } else {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤—Ä—É—á–Ω—É—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ENTER –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
    await new Promise(resolve => process.stdin.once('data', () => resolve()));
    const cookies = await page.cookies();
    fs.writeFileSync(COOKIE_PATH, JSON.stringify(cookies, null, 2));
    console.log('‚úÖ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }
}

export async function closePopup(page) {
  try {
    await new Promise(resolve => setTimeout(resolve, 1000));
    const result = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const declineButton = buttons.find(btn =>
        btn.textContent.trim().toLowerCase().includes("–±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å")
      );
      if (declineButton) {
        declineButton.click();
        return true;
      }
      return false;
    });

    if (result) {
      console.log('‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
    } else {
      console.log('‚ÑπÔ∏è –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–æ —Ç–µ–∫—Å—Ç—É)');
    }
  } catch (err) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø:', err.message);
  }
}

export async function chekKabinet(page) {
  await new Promise(resolve => setTimeout(resolve, 1000));
  const popoverSelector = '.popover-module_fixReferenceSize__16BR';
  const kabinet = await page.waitForSelector(`${popoverSelector}`, { timeout: 5000 });
  // Log the element details to see what we're working with
  const kabinetDetails = await kabinet.evaluate(el => ({
    tagName: el.tagName,
    className: el.className,
    ariaExpanded: el.getAttribute('aria-expanded'),
    innerHTML: el.innerHTML
  }));
  console.log('Popover element details: 1', kabinetDetails);
  let kabinetTitle = await kabinet.evaluate(el => el.textContent);
  console.log('Text content:', kabinetTitle);

  return { kabinet, kabinetTitle };
}
export async function switchKabinet(page) {
  const popoverSelector = '.popover-module_fixReferenceSize__16BR';
  const kabinet = await page.waitForSelector(`${popoverSelector}`);
  // Log the element details to see what we're working with
  const kabinetDetails = await kabinet.evaluate(el => ({
    tagName: el.tagName,
    className: el.className,
    ariaExpanded: el.getAttribute('aria-expanded'),
    innerHTML: el.innerHTML
  }));
  console.log('Popover element details: 1', kabinetDetails);
  let kabinetTitle = await kabinet.evaluate(el => el.textContent);
  console.log('Text content:', kabinetTitle);

  return { kabinet, kabinetTitle };
}

export async function checkAndSwitchCabinet(page, targetName) {
  await new Promise(resolve => setTimeout(resolve, 1000));
  const selectorCurrentCompany = 'span.index_companyItem_wgEhc';

  await page.waitForSelector(selectorCurrentCompany, { timeout: 5000 });
  const currentName = await page.$eval(selectorCurrentCompany, el => el.textContent.trim());

  if (currentName === targetName) {
    console.log(`‚úÖ –£–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç–µ "${targetName}"`);
    return;
  }

  console.log(`üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å "${currentName}" –Ω–∞ "${targetName}"`);

  // –ù–∞–≤–æ–¥–∏–º –º—ã—à–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ø–æ–≤–µ—Ä (–≤–º–µ—Å—Ç–æ –∫–ª–∏–∫–∞)
  const companyElement = await page.$(selectorCurrentCompany);
  if (!companyElement) {
    throw new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏');
  }

  await companyElement.hover();

  // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
  const dropdownOptionSelector = '.data-content-module_label__lf_x';
  await page.waitForSelector(dropdownOptionSelector, { timeout: 5000 });

  const options = await page.$$(dropdownOptionSelector);
  let found = false;

  for (const option of options) {
    const text = await page.evaluate(el => el.textContent.trim(), option);
    if (text === targetName) {
      await option.hover(); // –Ω–∞–≤–µ–¥—ë–º –º—ã—à–∫—É, —á—Ç–æ–±—ã –Ω–µ –∏—Å—á–µ–∑–ª–æ
      await option.click();
      found = true;
      break;
    }
  }

  if (!found) {
    throw new Error(`‚ùå –ö–æ–º–ø–∞–Ω–∏—è "${targetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ`);
  }

  // –ñ–¥—ë–º –ø–µ—Ä–µ—Ö–æ–¥–∞
  await page.waitForNavigation({ waitUntil: 'networkidle2' });
  console.log(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ "${targetName}" —É—Å–ø–µ—à–Ω–æ`);
}

export async function clickUntilPopoverOpens(page) {
  const containerSelector = '.index_buttons_GAN3c';
  const popoverSelector = '.popover-module_fixReferenceSize__16BR';
  const buttonText = '–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç';

  await page.waitForSelector(containerSelector);

  // Find the specific popover within the container
  const target = await page.waitForSelector(`${containerSelector} ${popoverSelector}`);
  let ariaExpanded = await target.evaluate(el => el.getAttribute('aria-expanded'));

  // Log the element details to see what we're working with
  const elementDetails = await target.evaluate(el => ({
    tagName: el.tagName,
    className: el.className,
    ariaExpanded: el.getAttribute('aria-expanded'),
    innerHTML: el.innerHTML
  }));
  console.log('Popover element details: 1', elementDetails);

  while (ariaExpanded !== 'true') {
    await target.click();
    let ariaExpanded = await target.evaluate(el => el.getAttribute('aria-expanded'));
    if (ariaExpanded === 'true') {
      return;
    }
  }

  console.log('‚úÖ –ü–æ–ø–∞–ø –æ—Ç–∫—Ä—ã—Ç (aria-expanded="true")');
}


export async function pressAndSaveFile(page, kabinetTitle) {
  try {
    const newkabinetTitle = kabinetTitle.replace(/[\\/:*?"<>|.]/g, '_');
    console.log('–ò–ú–Ø –ö–ê–ë–ò–ù–ï–¢–ê –ü–†–ò –ó–ê–ü–ò–°–ò: ', newkabinetTitle);

    const downloadPath = path.resolve('./downloads');
    const beforeFiles = new Set(fs.readdirSync(downloadPath));

    const radioByProducts = await page.waitForSelector('input[type="radio"][value="ByProducts"]');
    await radioByProducts.click();
    console.log('‚úÖ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–ü–æ —Ç–æ–≤–∞—Ä–∞–º"');

    const buttons = await page.$$('.index_downloadReportConfirmButton_2P5UK');
    let foundDownloadButton = false;

    for (const btn of buttons) {
      const text = await page.evaluate(el => el.textContent.trim(), btn);
      if (text === '–°–∫–∞—á–∞—Ç—å') {
        await btn.click();
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å" –Ω–∞–∂–∞—Ç–∞');
        foundDownloadButton = true;
        break;
      }
    }

    if (!foundDownloadButton) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å" –≤ –ø–æ–ø–∞–ø–µ');
    }

    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...');

    // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    const waitForDownload = async () => {
      const timeout = Date.now() + 30000; // 30 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç
      while (Date.now() < timeout) {
        const currentFiles = fs.readdirSync(downloadPath);
        const newFiles = currentFiles.filter(file => file.endsWith('.xlsx') && !beforeFiles.has(file));

        if (newFiles.length > 0) {
          const downloadedFileName = newFiles[0];
          const fullPath = path.join(downloadPath, downloadedFileName);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
          try {
            fs.accessSync(fullPath, fs.constants.R_OK | fs.constants.W_OK);
            return downloadedFileName;
          } catch (e) {
            // –§–∞–π–ª –∑–∞–Ω—è—Ç, –ø–æ–¥–æ–∂–¥—ë–º
          }
        }

        await new Promise(res => setTimeout(res, 500));
      }
      throw new Error('–§–∞–π–ª —Ç–∞–∫ –∏ –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è');
    };

    const downloadedFileName = await waitForDownload();

    const fileExt = path.extname(downloadedFileName);
    const baseName = downloadedFileName.replace(fileExt, '');
    const newFileName = `${baseName}_${newkabinetTitle}${fileExt}`;

    fs.renameSync(
      path.join(downloadPath, downloadedFileName),
      path.join(downloadPath, newFileName)
    );

    console.log('‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', newFileName);
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á—ë—Ç–∞:', err.message);
  }
}


